# 1 "mmllexer.mll"
 

  open Lexing
  open Mmlparser

  exception Lexing_error of string

  let keyword_or_ident =
    let h = Hashtbl.create 17 in
    List.iter (fun (s, k) -> Hashtbl.add h s k)
      [ "fun" , FUN ;
        "let", LET;
        "rec", REC; 
        "in", IN;
        "if" , IF ;
        "then" , THEN ;
        "else" , ELSE ; 
        "int", INT;
        "bool", BOOL;
        "unit", UNIT_TYP;

        "mod", MODULO;
        "not", NON;
        "type", TYPE;
        "mutable", MUTABLE;


      ] ;
    fun s ->
      try  Hashtbl.find h s
      with Not_found -> IDENT(s)
        

# 36 "mmllexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\225\255\226\255\229\255\230\255\231\255\232\255\233\255\
    \234\255\235\255\236\255\002\000\001\000\017\000\002\000\003\000\
    \245\255\246\255\248\255\249\255\079\000\017\000\032\000\034\000\
    \002\000\255\255\250\255\253\255\228\255\244\255\242\255\227\255\
    \240\255\239\255\238\255\037\000\252\255\253\255\002\000\049\000\
    \255\255\254\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\029\000\029\000\014\000\029\000\012\000\
    \255\255\255\255\255\255\255\255\004\000\003\000\008\000\018\000\
    \001\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\002\000\002\000\
    \255\255\255\255";
  Lexing.lex_default =
   "\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\037\000\000\000\000\000\255\255\255\255\
    \000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\024\000\025\000\024\000\000\000\024\000\000\000\024\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \024\000\014\000\024\000\000\000\000\000\016\000\012\000\033\000\
    \023\000\010\000\018\000\019\000\041\000\022\000\004\000\017\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\005\000\003\000\013\000\015\000\031\000\030\000\
    \029\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\026\000\027\000\038\000\032\000\039\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\040\000\009\000\000\000\008\000\028\000\020\000\
    \000\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\007\000\011\000\006\000\034\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\000\000\000\000\000\000\000\000\020\000\000\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\036\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\024\000\255\255\000\000\255\255\024\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\024\000\255\255\255\255\000\000\000\000\012\000\
    \000\000\000\000\000\000\000\000\038\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\013\000\014\000\
    \015\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\023\000\023\000\035\000\013\000\035\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\039\000\000\000\255\255\000\000\022\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\011\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\255\255\255\255\255\255\255\255\020\000\255\255\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\035\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 42 "mmllexer.mll"
      ( new_line lexbuf; token lexbuf )
# 168 "mmllexer.ml"

  | 1 ->
# 44 "mmllexer.mll"
      ( token lexbuf )
# 173 "mmllexer.ml"

  | 2 ->
# 46 "mmllexer.mll"
      ( comment lexbuf; token lexbuf )
# 178 "mmllexer.ml"

  | 3 ->
let
# 47 "mmllexer.mll"
              n
# 184 "mmllexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 48 "mmllexer.mll"
      ( CST(int_of_string n) )
# 188 "mmllexer.ml"

  | 4 ->
let
# 49 "mmllexer.mll"
             i
# 194 "mmllexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 50 "mmllexer.mll"
    ( keyword_or_ident i )
# 198 "mmllexer.ml"

  | 5 ->
# 52 "mmllexer.mll"
    ( UNIT )
# 203 "mmllexer.ml"

  | 6 ->
# 54 "mmllexer.mll"
      ( PLUS )
# 208 "mmllexer.ml"

  | 7 ->
# 56 "mmllexer.mll"
      ( STAR )
# 213 "mmllexer.ml"

  | 8 ->
# 58 "mmllexer.mll"
      ( MOINS )
# 218 "mmllexer.ml"

  | 9 ->
# 60 "mmllexer.mll"
      ( DIV )
# 223 "mmllexer.ml"

  | 10 ->
# 62 "mmllexer.mll"
      ( MODULO )
# 228 "mmllexer.ml"

  | 11 ->
# 64 "mmllexer.mll"
      ( EGAL )
# 233 "mmllexer.ml"

  | 12 ->
# 66 "mmllexer.mll"
      ( EG )
# 238 "mmllexer.ml"

  | 13 ->
# 68 "mmllexer.mll"
      ( NEGAL )
# 243 "mmllexer.ml"

  | 14 ->
# 70 "mmllexer.mll"
      ( INFS )
# 248 "mmllexer.ml"

  | 15 ->
# 72 "mmllexer.mll"
      ( INF )
# 253 "mmllexer.ml"

  | 16 ->
# 74 "mmllexer.mll"
      ( ET )
# 258 "mmllexer.ml"

  | 17 ->
# 76 "mmllexer.mll"
      ( OU )
# 263 "mmllexer.ml"

  | 18 ->
# 78 "mmllexer.mll"
      ( PARGAUCHE )
# 268 "mmllexer.ml"

  | 19 ->
# 80 "mmllexer.mll"
      ( PARDROITE )
# 273 "mmllexer.ml"

  | 20 ->
# 82 "mmllexer.mll"
      ( CROCHETG )
# 278 "mmllexer.ml"

  | 21 ->
# 84 "mmllexer.mll"
      ( CROCHETD )
# 283 "mmllexer.ml"

  | 22 ->
# 86 "mmllexer.mll"
      ( ACCG )
# 288 "mmllexer.ml"

  | 23 ->
# 88 "mmllexer.mll"
      ( ACCD )
# 293 "mmllexer.ml"

  | 24 ->
# 90 "mmllexer.mll"
      ( DEUXPT )
# 298 "mmllexer.ml"

  | 25 ->
# 92 "mmllexer.mll"
      ( PT )
# 303 "mmllexer.ml"

  | 26 ->
# 94 "mmllexer.mll"
      (PTV)
# 308 "mmllexer.ml"

  | 27 ->
# 96 "mmllexer.mll"
      ( FLECHE )
# 313 "mmllexer.ml"

  | 28 ->
# 98 "mmllexer.mll"
      ( FLECHEG )
# 318 "mmllexer.ml"

  | 29 ->
# 105 "mmllexer.mll"
      ( raise (Lexing_error ("unknown character : " ^ (lexeme lexbuf))) )
# 323 "mmllexer.ml"

  | 30 ->
# 107 "mmllexer.mll"
      ( EOF )
# 328 "mmllexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 35
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 111 "mmllexer.mll"
      ( () )
# 340 "mmllexer.ml"

  | 1 ->
# 113 "mmllexer.mll"
      ( comment lexbuf; comment lexbuf )
# 345 "mmllexer.ml"

  | 2 ->
# 115 "mmllexer.mll"
      ( comment lexbuf )
# 350 "mmllexer.ml"

  | 3 ->
# 117 "mmllexer.mll"
      ( raise (Lexing_error "unterminated comment") )
# 355 "mmllexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

